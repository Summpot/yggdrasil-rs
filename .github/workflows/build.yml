name: Build

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: yggdrasil-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: yggdrasil-windows-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: yggdrasil-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: yggdrasil-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - uses: davidlattimore/wild-action@latest
        if: runner.os == 'Linux'

      - name: Setup Rust cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libssl-dev pkg-config clang

      - name: Build workspace
        env:
          RUSTC_WRAPPER: sccache
          SCCACHE_GHA_ENABLED: "true"
        run: |
          cargo build --workspace --release --target ${{ matrix.target }}
          sccache --show-stats

      - name: Prepare artifacts (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/yggdrasil artifacts/yggdrasil
          cp target/${{ matrix.target }}/release/yggdrasilctl artifacts/yggdrasilctl
          cp target/${{ matrix.target }}/release/genkeys artifacts/genkeys
          cp target/${{ matrix.target }}/release/yggdrasil-bench artifacts/yggdrasil-bench
          chmod +x artifacts/*
          tar -czf ${{ matrix.artifact_name }}.tar.gz -C artifacts .

      - name: Prepare artifacts (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts
          Copy-Item target/${{ matrix.target }}/release/yggdrasil.exe artifacts/
          Copy-Item target/${{ matrix.target }}/release/yggdrasilctl.exe artifacts/
          Copy-Item target/${{ matrix.target }}/release/genkeys.exe artifacts/
          Copy-Item target/${{ matrix.target }}/release/yggdrasil-bench.exe artifacts/
          Compress-Archive -Path artifacts/* -DestinationPath ${{ matrix.artifact_name }}.zip

      - name: Upload artifacts (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.tar.gz
          retention-days: 30

      - name: Upload artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.zip
          retention-days: 30

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-debug
            type=ref,event=pr,suffix=-debug
            type=sha,prefix={{branch}}-,suffix=-debug
            type=raw,value=latest-debug,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=build-docker
          cache-to: type=gha,scope=build-docker,mode=max
          platforms: linux/amd64,linux/arm64

  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - uses: davidlattimore/wild-action@latest
        if: runner.os == 'Linux'

      - name: Setup Rust cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-test-

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libssl-dev pkg-config clang

      - name: Run tests
        env:
          RUSTC_WRAPPER: sccache
          SCCACHE_GHA_ENABLED: "true"
        run: |
          cargo test --workspace --all-features --target ${{ matrix.target }}
          sccache --show-stats

      - name: Run clippy (advisory only)
        if: runner.os == 'Linux'
        continue-on-error: true
        env:
          RUSTC_WRAPPER: sccache
          SCCACHE_GHA_ENABLED: "true"
        run: cargo clippy --workspace --all-features --target ${{ matrix.target }}

      - name: Check formatting
        if: runner.os == 'Linux'
        run: cargo fmt --all -- --check
