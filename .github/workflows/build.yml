name: Build

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    name: Build on ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: yggdrasil-linux-amd64
            artifact_ext: tar.gz
            arch: amd64
          - os: macos-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: yggdrasil-linux-arm64
            artifact_ext: tar.gz
            arch: arm64
          - os: macos-latest
            target: x86_64-unknown-linux-musl
            artifact_name: yggdrasil-linux-amd64-musl
            artifact_ext: tar.gz
            arch: amd64
          - os: macos-latest
            target: aarch64-unknown-linux-musl
            artifact_name: yggdrasil-linux-arm64-musl
            artifact_ext: tar.gz
            arch: arm64
          - os: macos-latest
            target: x86_64-pc-windows-msvc
            artifact_name: yggdrasil-windows-amd64
            artifact_ext: zip
            arch: amd64
          - os: macos-latest
            target: aarch64-pc-windows-msvc
            artifact_name: yggdrasil-windows-arm64
            artifact_ext: zip
            arch: arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: yggdrasil-macos-amd64
            artifact_ext: tar.gz
            arch: amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: yggdrasil-macos-arm64
            artifact_ext: tar.gz
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Setup Rust cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-
      
      - name: Install cargo-zigbuild
        run: |
          pip3 install cargo-zigbuild --break-system-packages
          
      - name: Build workspace (zigbuild)
        env:
          RUSTC_WRAPPER: sccache
          SCCACHE_GHA_ENABLED: "true"
        run: |
          cargo zigbuild --workspace --release --target ${{ matrix.target }}
          sccache --show-stats

      - name: Prepare artifacts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts
          
          $target = "${{ matrix.target }}"
          $basePath = "target/$target/release"
          
          if ($target -like "*windows*") {
            Copy-Item "$basePath/yggdrasil.exe" artifacts/ -ErrorAction SilentlyContinue
            Copy-Item "$basePath/yggdrasilctl.exe" artifacts/ -ErrorAction SilentlyContinue
            Copy-Item "$basePath/genkeys.exe" artifacts/ -ErrorAction SilentlyContinue
            Copy-Item "$basePath/yggdrasil-bench.exe" artifacts/ -ErrorAction SilentlyContinue
            
            Set-Location artifacts
            Compress-Archive -Path * -DestinationPath ../${{ matrix.artifact_name }}.zip
          } else {
            Copy-Item "$basePath/yggdrasil" artifacts/ -ErrorAction SilentlyContinue
            Copy-Item "$basePath/yggdrasilctl" artifacts/ -ErrorAction SilentlyContinue
            Copy-Item "$basePath/genkeys" artifacts/ -ErrorAction SilentlyContinue
            Copy-Item "$basePath/yggdrasil-bench" artifacts/ -ErrorAction SilentlyContinue
            
            if ($IsMacOS -or $IsLinux) {
              chmod +x artifacts/*
            }
            
            Set-Location artifacts
            tar -czf ../${{ matrix.artifact_name }}.tar.gz *
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.${{ matrix.artifact_ext }}
          retention-days: 30

  build-docker-amd64:
    name: Build Docker Image (linux/amd64)
    runs-on: ubuntu-latest
    needs: build-binaries
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download amd64 musl binaries
        uses: actions/download-artifact@v4
        with:
          name: yggdrasil-linux-amd64-musl
          path: ./binaries

      - name: Extract binaries
        run: |
          cd binaries
          tar -xzf yggdrasil-linux-amd64-musl.tar.gz
          ls -la

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-debug-amd64
            type=ref,event=pr,suffix=-debug-amd64
            type=sha,prefix={{branch}}-,suffix=-debug-amd64
            type=raw,value=latest-debug-amd64,enable={{is_default_branch}}

      - name: Build and push Docker image (linux/amd64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          build-args: |
            TARGETARCH=amd64

  build-docker-arm64:
    name: Build Docker Image (linux/arm64)
    runs-on: ubuntu-latest
    needs: build-binaries
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download arm64 musl binaries
        uses: actions/download-artifact@v4
        with:
          name: yggdrasil-linux-arm64-musl
          path: ./binaries

      - name: Extract binaries
        run: |
          cd binaries
          tar -xzf yggdrasil-linux-arm64-musl.tar.gz
          ls -la

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-debug-arm64
            type=ref,event=pr,suffix=-debug-arm64
            type=sha,prefix={{branch}}-,suffix=-debug-arm64
            type=raw,value=latest-debug-arm64,enable={{is_default_branch}}

      - name: Build and push Docker image (linux/arm64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64
          build-args: |
            TARGETARCH=arm64

  test:
    name: Test on ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            arch: amd64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Setup Rust cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-test-

      - name: Install cargo-zigbuild
        run: |
          pip3 install cargo-zigbuild --break-system-packages

      - name: Run tests
        env:
          RUSTC_WRAPPER: sccache
          SCCACHE_GHA_ENABLED: "true"
        run: |
          cargo zigbuild test --workspace --all-features --target ${{ matrix.target }}
          sccache --show-stats
